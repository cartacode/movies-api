{
  "swagger": "2.0",
  "info": {},
  "paths": {
    "/category/": {
      "get": {
        "description": "Return all categories, paginated",
        "tags": [
          "category"
        ],
        "summary": "List all of the categories in a pagination response.",
        "operationId": "categoryList",
        "responses": {
          "200": {
            "$ref": "#/responses/categoryResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "post": {
        "description": "Return all categories, paginated",
        "tags": [
          "category"
        ],
        "summary": "Post a new category",
        "operationId": "categoryPost",
        "parameters": [
          {
            "description": "New CategoryDocument",
            "name": "category",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/categoryResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "patch": {
        "description": "Update a current category",
        "tags": [
          "category"
        ],
        "summary": "Update a category",
        "operationId": "categoryPatch",
        "parameters": [
          {
            "description": "New CategoryDocument",
            "name": "category",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/categoryResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/category/slug/{slug}": {
      "get": {
        "description": "Search for a category by slug",
        "tags": [
          "category"
        ],
        "summary": "Get a category the given the slug.",
        "operationId": "categorySlugGetByNAme",
        "parameters": [
          {
            "type": "string",
            "description": "slug",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/categoryResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/category/{ObjectId}": {
      "get": {
        "description": "Get a given category",
        "tags": [
          "category"
        ],
        "summary": "Get a category the given ObjectId.",
        "operationId": "categoryGetId",
        "parameters": [
          {
            "description": "MongoDB ObjectId",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/categoryResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "delete": {
        "description": "Delete a given category",
        "tags": [
          "category"
        ],
        "summary": "Delete a category the given ObjectId.",
        "operationId": "categoryDeleteId",
        "parameters": [
          {
            "description": "MongoDB ObjectId",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/customer/": {
      "get": {
        "description": "Return all categories, paginated",
        "tags": [
          "customer"
        ],
        "summary": "List all of the categories in a pagination response.",
        "operationId": "customerList",
        "responses": {
          "200": {
            "$ref": "#/responses/customerResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "post": {
        "description": "Return all categories, paginated",
        "tags": [
          "customer"
        ],
        "summary": "Post a new customer",
        "operationId": "customerPost",
        "parameters": [
          {
            "description": "New CustomerDocument",
            "name": "customer",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/customerResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "patch": {
        "description": "Update a current customer",
        "tags": [
          "customer"
        ],
        "summary": "Update a customer",
        "operationId": "customerPatch",
        "parameters": [
          {
            "description": "New CustomerDocument",
            "name": "customer",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/customerResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/customer/wishlist/movie/{ObjectId}": {
      "post": {
        "description": "POST ObjectId to add item to wishlist",
        "tags": [
          "customer"
        ],
        "summary": "Post a new customer wishlist for a movie",
        "operationId": "customerWishSceneAdd",
        "parameters": [
          {
            "description": "MongoDB Scene Document ID",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/customerResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "delete": {
        "description": "Delete ObjectId to add item to wishlist",
        "tags": [
          "customer"
        ],
        "summary": "Post a new customer wishlist for a movie",
        "operationId": "customerWishSceneAdd",
        "parameters": [
          {
            "description": "MongoDB Scene Document ID",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/customerResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/customer/wishlist/scene/{ObjectId}": {
      "post": {
        "description": "POST sceneId to add item to wishlist",
        "tags": [
          "customer"
        ],
        "summary": "Post a new customer wishlist for a scene",
        "operationId": "customerWishSceneAdd",
        "parameters": [
          {
            "description": "MongoDB Scene Document ID",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/customerResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "delete": {
        "description": "Delete ObjectId to add item to wishlist",
        "tags": [
          "customer"
        ],
        "summary": "Post a new customer wishlist for a scene",
        "operationId": "customerWishSceneAdd",
        "parameters": [
          {
            "description": "MongoDB Scene Document ID",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/customerResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/customer/wishlist/series/{ObjectId}": {
      "post": {
        "description": "POST ObjectId to add item to wishlist",
        "tags": [
          "customer"
        ],
        "summary": "Post a new customer wishlist for a series",
        "operationId": "customerWishSceneAdd",
        "parameters": [
          {
            "description": "MongoDB Scene Document ID",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/customerResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "delete": {
        "description": "Delete ObjectId to add item to wishlist",
        "tags": [
          "customer"
        ],
        "summary": "Post a new customer wishlist for a series",
        "operationId": "customerWishSceneAdd",
        "parameters": [
          {
            "description": "MongoDB Scene Document ID",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/customerResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/customer/wishlist/volume/{ObjectId}": {
      "post": {
        "description": "POST ObjectId to add item to wishlist",
        "tags": [
          "customer"
        ],
        "summary": "Post a new customer wishlist for a volume",
        "operationId": "customerWishSceneAdd",
        "parameters": [
          {
            "description": "MongoDB Scene Document ID",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/customerResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "delete": {
        "description": "Delete ObjectId to add item to wishlist",
        "tags": [
          "customer"
        ],
        "summary": "Post a new customer wishlist for a volume",
        "operationId": "customerWishSceneAdd",
        "parameters": [
          {
            "description": "MongoDB Scene Document ID",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/customerResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/customer/{ObjectId}": {
      "get": {
        "description": "Get a given customer",
        "tags": [
          "customer"
        ],
        "summary": "Get a customer the given ObjectId.",
        "operationId": "customerGetId",
        "parameters": [
          {
            "description": "MongoDB ObjectId",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/customerResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "delete": {
        "description": "Delete a given customer",
        "tags": [
          "customer"
        ],
        "summary": "Delete a customer the given ObjectId.",
        "operationId": "customerDeleteId",
        "parameters": [
          {
            "description": "MongoDB ObjectId",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/movie/": {
      "get": {
        "description": "Return all categories, paginated",
        "tags": [
          "movie"
        ],
        "summary": "List all of the categories in a pagination response.",
        "operationId": "movieList",
        "responses": {
          "200": {
            "$ref": "#/responses/movieResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "post": {
        "description": "Return all categories, paginated",
        "tags": [
          "movie"
        ],
        "summary": "Post a new movie",
        "operationId": "moviePost",
        "parameters": [
          {
            "description": "New MovieDocument",
            "name": "movie",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Movie"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/movieResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "patch": {
        "description": "Update a current movie",
        "tags": [
          "movie"
        ],
        "summary": "Update a movie",
        "operationId": "moviePatch",
        "parameters": [
          {
            "description": "New CategoryDocument",
            "name": "movie",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/movieResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/movie/slug/{slug}": {
      "get": {
        "description": "Search for a movie by slug",
        "tags": [
          "movie"
        ],
        "summary": "Get a movie the given the slug.",
        "operationId": "movieSlugGetId",
        "parameters": [
          {
            "type": "string",
            "description": "slug",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/movieResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/movie/{ObjectId}": {
      "get": {
        "description": "Get a given movie",
        "tags": [
          "movie"
        ],
        "summary": "Get a movie the given ObjectId.",
        "operationId": "movieGetId",
        "parameters": [
          {
            "description": "MongoDB ObjectId",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/movieResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "delete": {
        "description": "Delete a given movie",
        "tags": [
          "movie"
        ],
        "summary": "Delete a movie the given ObjectId.",
        "operationId": "movieDeleteId",
        "parameters": [
          {
            "description": "MongoDB ObjectId",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/performer/": {
      "get": {
        "description": "Return all categories, paginated",
        "tags": [
          "performer"
        ],
        "summary": "List all of the categories in a pagination response.",
        "operationId": "performerList",
        "responses": {
          "200": {
            "$ref": "#/responses/performerResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "post": {
        "description": "Return all categories, paginated",
        "tags": [
          "performer"
        ],
        "summary": "Post a new performer",
        "operationId": "performerPost",
        "parameters": [
          {
            "description": "New PerformerDocument",
            "name": "performer",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Performer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/performerResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "patch": {
        "description": "Update a current performer",
        "tags": [
          "performer"
        ],
        "summary": "Update a performer",
        "operationId": "performerPatch",
        "parameters": [
          {
            "description": "New CategoryDocument",
            "name": "performer",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/performerResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/performer/slug/{slug}": {
      "get": {
        "description": "Search for a performer by slug",
        "tags": [
          "performer"
        ],
        "summary": "Get a performer the given the slug.",
        "operationId": "performerSlugGetId",
        "parameters": [
          {
            "type": "string",
            "description": "slug",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/performerResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/performer/{ObjectId}": {
      "get": {
        "description": "Get a given performer",
        "tags": [
          "performer"
        ],
        "summary": "Get a performer the given ObjectId.",
        "operationId": "performerGetId",
        "parameters": [
          {
            "description": "MongoDB ObjectId",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/performerResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "delete": {
        "description": "Delete a given performer",
        "tags": [
          "performer"
        ],
        "summary": "Delete a performer the given ObjectId.",
        "operationId": "performerDeleteId",
        "parameters": [
          {
            "description": "MongoDB ObjectId",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/scene/": {
      "post": {
        "description": "Return all categories, paginated",
        "tags": [
          "scene"
        ],
        "summary": "Post a new scene",
        "operationId": "scenePost",
        "parameters": [
          {
            "description": "New SceneDocument",
            "name": "scene",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Scene"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/sceneResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "patch": {
        "description": "Update a current scene",
        "tags": [
          "scene"
        ],
        "summary": "Update a scene",
        "operationId": "scenePatch",
        "parameters": [
          {
            "description": "New CategoryDocument",
            "name": "scene",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/sceneResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/scene/{ObjectId}": {
      "get": {
        "description": "Get a given scene",
        "tags": [
          "scene"
        ],
        "summary": "Get a scene the given ObjectId.",
        "operationId": "sceneGetId",
        "parameters": [
          {
            "description": "MongoDB ObjectId",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/sceneResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "delete": {
        "description": "Delete a given scene",
        "tags": [
          "scene"
        ],
        "summary": "Delete a scene the given ObjectId.",
        "operationId": "sceneDeleteId",
        "parameters": [
          {
            "description": "MongoDB ObjectId",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/series/": {
      "get": {
        "description": "Return all categories, paginated",
        "tags": [
          "series"
        ],
        "summary": "List all of the categories in a pagination response.",
        "operationId": "seriesList",
        "responses": {
          "200": {
            "$ref": "#/responses/seriesResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "post": {
        "description": "Return all categories, paginated",
        "tags": [
          "series"
        ],
        "summary": "Post a new series",
        "operationId": "seriesPost",
        "parameters": [
          {
            "description": "New SeriesDocument",
            "name": "series",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Series"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/seriesResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "patch": {
        "description": "Update a current series",
        "tags": [
          "series"
        ],
        "summary": "Update a series",
        "operationId": "seriesPatch",
        "parameters": [
          {
            "description": "New CategoryDocument",
            "name": "series",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/seriesResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/series/{ObjectId}": {
      "get": {
        "description": "Get a given series",
        "tags": [
          "series"
        ],
        "summary": "Get a series the given ObjectId.",
        "operationId": "seriesGetId",
        "parameters": [
          {
            "description": "MongoDB ObjectId",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/seriesResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "delete": {
        "description": "Delete a given series",
        "tags": [
          "series"
        ],
        "summary": "Delete a series the given ObjectId.",
        "operationId": "seriesDeleteId",
        "parameters": [
          {
            "description": "MongoDB ObjectId",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/studio/": {
      "get": {
        "description": "Return all categories, paginated",
        "tags": [
          "studio"
        ],
        "summary": "List all of the categories in a pagination response.",
        "operationId": "studioList",
        "responses": {
          "200": {
            "$ref": "#/responses/studioResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "post": {
        "description": "Return all categories, paginated",
        "tags": [
          "studio"
        ],
        "summary": "Post a new studio",
        "operationId": "studioPost",
        "parameters": [
          {
            "description": "New StudioDocument",
            "name": "studio",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Studio"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/studioResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "patch": {
        "description": "Update a current studio",
        "tags": [
          "studio"
        ],
        "summary": "Update a studio",
        "operationId": "studioPatch",
        "parameters": [
          {
            "description": "New CategoryDocument",
            "name": "studio",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/studioResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/studio/slug/{slug}": {
      "get": {
        "description": "Search for a studio by slug",
        "tags": [
          "studio"
        ],
        "summary": "Get a studio the given the slug.",
        "operationId": "studioSlugGetId",
        "parameters": [
          {
            "type": "string",
            "description": "slug",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/studioResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/studio/{ObjectId}": {
      "get": {
        "description": "Get a given studio",
        "tags": [
          "studio"
        ],
        "summary": "Get a studio the given ObjectId.",
        "operationId": "studioGetId",
        "parameters": [
          {
            "description": "MongoDB ObjectId",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/studioResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "delete": {
        "description": "Delete a given studio",
        "tags": [
          "studio"
        ],
        "summary": "Delete a studio the given ObjectId.",
        "operationId": "studioDeleteId",
        "parameters": [
          {
            "description": "MongoDB ObjectId",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/volume/": {
      "get": {
        "description": "Return all categories, paginated",
        "tags": [
          "volume"
        ],
        "summary": "List all of the categories in a pagination response.",
        "operationId": "volumeList",
        "responses": {
          "200": {
            "$ref": "#/responses/volumeResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "post": {
        "description": "Return all categories, paginated",
        "tags": [
          "volume"
        ],
        "summary": "Post a new volume",
        "operationId": "volumePost",
        "parameters": [
          {
            "description": "New VolumeDocument",
            "name": "volume",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/volumeResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "patch": {
        "description": "Update a current volume",
        "tags": [
          "volume"
        ],
        "summary": "Update a volume",
        "operationId": "volumePatch",
        "parameters": [
          {
            "description": "New CategoryDocument",
            "name": "volume",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/volumeResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    },
    "/volume/{ObjectId}": {
      "get": {
        "description": "Get a given volume",
        "tags": [
          "volume"
        ],
        "summary": "Get a volume the given ObjectId.",
        "operationId": "volumeGetId",
        "parameters": [
          {
            "description": "MongoDB ObjectId",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/volumeResp"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      },
      "delete": {
        "description": "Delete a given volume",
        "tags": [
          "volume"
        ],
        "summary": "Delete a volume the given ObjectId.",
        "operationId": "volumeDeleteId",
        "parameters": [
          {
            "description": "MongoDB ObjectId",
            "name": "ObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ObjectId"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "404": {
            "$ref": "#/responses/genericJsonError"
          }
        }
      }
    }
  },
  "definitions": {
    "Category": {
      "description": "A category can be associated with a scene, movie, volume, and series",
      "type": "object",
      "title": "Category Document",
      "required": [
        "slug",
        "title"
      ],
      "properties": {
        "_created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "_id": {
          "$ref": "#/definitions/ObjectId"
        },
        "_modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "description": {
          "description": "Description of this category if it has one. Not required",
          "type": "string",
          "x-go-name": "Description"
        },
        "slug": {
          "description": "Unique Slug for this category. lowercase and character stripped",
          "type": "string",
          "x-go-name": "Slug"
        },
        "title": {
          "description": "Unique Title for this category",
          "type": "string",
          "x-go-name": "Title"
        }
      },
      "x-go-package": "github.com/VuliTv/api/models"
    },
    "Customer": {
      "description": "A customer on the site and all of their preferences and profile",
      "type": "object",
      "title": "Customer Document",
      "properties": {
        "active": {
          "description": "True/False. Is the user active",
          "type": "boolean",
          "x-go-name": "Active"
        },
        "credit": {
          "$ref": "#/definitions/CustomerCredit"
        },
        "email": {
          "description": "Unique email for this customer, read only, cognito controlled",
          "type": "string",
          "x-go-name": "Email",
          "readOnly": true
        },
        "purchased": {
          "$ref": "#/definitions/CustomerPurchased"
        },
        "wishlist": {
          "$ref": "#/definitions/CustomerWishlist"
        }
      },
      "x-go-package": "github.com/VuliTv/api/models"
    },
    "CustomerCredit": {
      "description": "CustomerCredit --",
      "type": "object",
      "properties": {
        "info_stored": {
          "description": "Has the user stored credit information",
          "type": "boolean",
          "x-go-name": "InfoStored"
        },
        "key": {
          "description": "Key for 3 leg transactions to provider bank",
          "type": "string",
          "x-go-name": "Key"
        }
      },
      "x-go-package": "github.com/VuliTv/api/models"
    },
    "CustomerPurchased": {
      "description": "CustomerPurchased --",
      "type": "object",
      "properties": {
        "movies": {
          "description": "List of Mongo ObjectID for the movies wish list. Embeddable",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Movies"
        },
        "scenes": {
          "description": "List of Mongo ObjectID for the scenes wish list. Embeddable",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Scenes"
        },
        "volumes": {
          "description": "List of Mongo ObjectID for the volumes wish list. Embeddable",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Volumes"
        }
      },
      "x-go-package": "github.com/VuliTv/api/models"
    },
    "CustomerWishlist": {
      "description": "CustomerWishlist --",
      "type": "object",
      "properties": {
        "movies": {
          "description": "List of Mongo ObjectID for the movies wish list. Embeddable",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Movies"
        },
        "scenes": {
          "description": "List of Mongo ObjectID for the scenes wish list. Embeddable",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Scenes"
        },
        "volumes": {
          "description": "List of Mongo ObjectID for the volumes wish list. Embeddable",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Volumes"
        }
      },
      "x-go-package": "github.com/VuliTv/api/models"
    },
    "Movie": {
      "description": "A Movie we can show. Contains all information and streaming data",
      "type": "object",
      "title": "Movie Document",
      "properties": {
        "_created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "_id": {
          "$ref": "#/definitions/ObjectId"
        },
        "_modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "category": {
          "description": "List of Categories",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Category"
        },
        "description": {
          "description": "Description of this movie if it has one. Not required",
          "type": "string",
          "x-go-name": "Description"
        },
        "downvotes": {
          "description": "Calculated by user input. Only decreases.",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Downvotes"
        },
        "information": {
          "$ref": "#/definitions/MovieInformation"
        },
        "is_published": {
          "description": "True/False. Is it available on the site or not",
          "type": "boolean",
          "x-go-name": "IsPublished"
        },
        "length": {
          "description": "Total movie length in seconds",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Length"
        },
        "playlist": {
          "description": "Ordered list of movie location(s)",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Playlist"
        },
        "price": {
          "description": "Read only value. Only Admin can update. Sets the price for a movie",
          "type": "number",
          "format": "float",
          "x-go-name": "Price"
        },
        "rank": {
          "description": "Calculated externally and maintained here",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Rank"
        },
        "reviewed": {
          "description": "True/False. Has someone reviewed this movie",
          "type": "boolean",
          "x-go-name": "Reviewed"
        },
        "slug": {
          "description": "Unique Slug for this movie. Made of \u003ctitle\u003e\u003cstudio\u003e lowercase and character stripped",
          "type": "string",
          "x-go-name": "Slug"
        },
        "tags": {
          "description": "Free list of tag strings",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        },
        "title": {
          "description": "Unique Title for this movie",
          "type": "string",
          "x-go-name": "Title"
        },
        "upvotes": {
          "description": "Calculated by user input. Only increases.",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Upvotes"
        },
        "views": {
          "description": "Calculated by user view. Only increases.",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Views"
        }
      },
      "x-go-package": "github.com/VuliTv/api/models"
    },
    "MovieInformation": {
      "description": "MovieInformation --",
      "type": "object",
      "properties": {
        "director": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Director"
        },
        "performers": {
          "description": "List of Mongo ObjectID for the Performers in this movie. Embeddable",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Performers"
        },
        "studio": {
          "type": "string",
          "x-go-name": "Studio"
        }
      },
      "x-go-package": "github.com/VuliTv/api/models"
    },
    "ObjectId": {
      "description": "http://www.mongodb.org/display/DOCS/Object+IDs",
      "type": "string",
      "title": "ObjectId is a unique ID identifying a BSON value. It must be exactly 12 bytes\nlong. MongoDB objects by default have such a property set in their \"_id\"\nproperty.",
      "x-go-package": "github.com/VuliTv/api/vendor/gopkg.in/mgo.v2/bson"
    },
    "Performer": {
      "description": "A document containing all information about a performer",
      "type": "object",
      "title": "Performer Document",
      "properties": {
        "_created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "_id": {
          "$ref": "#/definitions/ObjectId"
        },
        "_modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "bio": {
          "type": "string",
          "x-go-name": "Bio"
        },
        "birthdate": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Birthdate"
        },
        "birthplace": {
          "type": "string",
          "x-go-name": "Birthplace"
        },
        "gender": {
          "type": "string",
          "x-go-name": "Gender"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "size": {
          "$ref": "#/definitions/PerformerSize"
        },
        "slug": {
          "type": "string",
          "x-go-name": "Slug"
        },
        "social": {
          "$ref": "#/definitions/PerformerSocial"
        },
        "traits": {
          "$ref": "#/definitions/PerformerTraits"
        }
      },
      "x-go-package": "github.com/VuliTv/api/models"
    },
    "PerformerSize": {
      "description": "PerformerSize --",
      "type": "object",
      "properties": {
        "bust": {
          "type": "string",
          "x-go-name": "Bust"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "Height"
        },
        "waist": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "Waist"
        },
        "weight": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "Weight"
        }
      },
      "x-go-package": "github.com/VuliTv/api/models"
    },
    "PerformerSocial": {
      "description": "PerformerSocial --",
      "type": "object",
      "properties": {
        "instagram": {
          "type": "string",
          "x-go-name": "Instagram"
        },
        "snapchat": {
          "type": "string",
          "x-go-name": "Snapchat"
        },
        "twitter": {
          "type": "string",
          "x-go-name": "Twitter"
        },
        "youtube": {
          "type": "string",
          "x-go-name": "Youtube"
        }
      },
      "x-go-package": "github.com/VuliTv/api/models"
    },
    "PerformerTraits": {
      "description": "PerformerTraits --",
      "type": "object",
      "properties": {
        "ethnicity": {
          "type": "string",
          "x-go-name": "Ethnicity"
        },
        "haircolor": {
          "type": "string",
          "x-go-name": "HairColor"
        },
        "piercings": {
          "type": "boolean",
          "x-go-name": "Piercings"
        },
        "sign": {
          "type": "boolean",
          "x-go-name": "StarSign"
        },
        "tattoos": {
          "type": "boolean",
          "x-go-name": "Tattoos"
        }
      },
      "x-go-package": "github.com/VuliTv/api/models"
    },
    "Scene": {
      "description": "A scene can be associated with a volume, and series",
      "type": "object",
      "title": "Scene Document",
      "properties": {
        "_created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "_id": {
          "$ref": "#/definitions/ObjectId"
        },
        "_modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "category": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Category"
        },
        "description": {
          "description": "Description of this scene if it has one. Not required",
          "type": "string",
          "x-go-name": "Description"
        },
        "downvotes": {
          "description": "Calculated by user input. Only decreases.",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Downvotes"
        },
        "information": {
          "$ref": "#/definitions/VolumeInformation"
        },
        "is_published": {
          "description": "True/False. Is it available on the site or not",
          "type": "boolean",
          "x-go-name": "IsPublished"
        },
        "length": {
          "description": "Total scene length in seconds",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Length"
        },
        "price": {
          "description": "Read only value. Only Admin can update. Sets the price for a scene",
          "type": "number",
          "format": "float",
          "x-go-name": "Price"
        },
        "rank": {
          "description": "Calculated externally and maintained here",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Rank"
        },
        "reviewed": {
          "description": "True/False. Has someone reviewed this scene",
          "type": "boolean",
          "x-go-name": "Reviewed"
        },
        "slug": {
          "description": "Unique Slug for this scene. Made of \u003ctitle\u003e\u003cstudio\u003e lowercase and character stripped",
          "type": "string",
          "x-go-name": "Slug"
        },
        "tags": {
          "description": "Free list of tag strings",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        },
        "title": {
          "description": "Unique Title for this scene",
          "type": "string",
          "x-go-name": "Title"
        },
        "upvotes": {
          "description": "Calculated by user input. Only increases.",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Upvotes"
        },
        "views": {
          "description": "Calculated by user view. Only increases.",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Views"
        },
        "volume": {
          "$ref": "#/definitions/Volume"
        }
      },
      "x-go-package": "github.com/VuliTv/api/models"
    },
    "Series": {
      "description": "A series can be associated with N volumes",
      "type": "object",
      "title": "Series Document",
      "properties": {
        "_created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "_id": {
          "$ref": "#/definitions/ObjectId"
        },
        "_modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "category": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Category"
        },
        "description": {
          "description": "Description of this scene if it has one. Not required",
          "type": "string",
          "x-go-name": "Description"
        },
        "downvotes": {
          "description": "Calculated by user input. Only decreases.",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Downvotes"
        },
        "information": {
          "$ref": "#/definitions/VolumeInformation"
        },
        "is_published": {
          "description": "True/False. Is it available on the site or not",
          "type": "boolean",
          "x-go-name": "IsPublished"
        },
        "length": {
          "description": "Cummulative volume lengths in seconds",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Length"
        },
        "price": {
          "description": "Read only value. Only Admin can update. Sets the price for a the volume which supersedes the scene price",
          "type": "number",
          "format": "float",
          "x-go-name": "Price"
        },
        "rank": {
          "description": "Calculated externally and maintained here",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Rank"
        },
        "reviewed": {
          "description": "True/False. Has someone reviewed this scene",
          "type": "boolean",
          "x-go-name": "Reviewed"
        },
        "slug": {
          "description": "Unique Slug for this series. Made of \u003ctitle\u003e\u003cstudio\u003e-series lowercase and character stripped",
          "type": "string",
          "x-go-name": "Slug"
        },
        "tags": {
          "description": "Free list of tag strings",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        },
        "title": {
          "description": "Unique Title for this entire series(show)",
          "type": "string",
          "x-go-name": "Title"
        },
        "upvotes": {
          "description": "Calculated by user input. Only increases.",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Upvotes"
        },
        "views": {
          "description": "Calculated by user view. Only increases.",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Views"
        }
      },
      "x-go-package": "github.com/VuliTv/api/models"
    },
    "Studio": {
      "description": "A studio can be associated with a Series, Volume, or Movie",
      "type": "object",
      "title": "Studio Document",
      "properties": {
        "_created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "_id": {
          "$ref": "#/definitions/ObjectId"
        },
        "_modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "description": {
          "description": "Public description of the studio",
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "description": "Name of the studio",
          "type": "string",
          "x-go-name": "Name"
        },
        "slug": {
          "description": "Unique Slug for this studio. Made of \u003ctitle\u003e\u003cstudio\u003e lowercase and character stripped",
          "type": "string",
          "x-go-name": "Slug"
        }
      },
      "x-go-package": "github.com/VuliTv/api/models"
    },
    "Volume": {
      "description": "A volume can be associated with a Series",
      "type": "object",
      "title": "Volume Document",
      "properties": {
        "_created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "_id": {
          "$ref": "#/definitions/ObjectId"
        },
        "_modified": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Modified"
        },
        "category": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Category"
        },
        "description": {
          "description": "Description of this scene if it has one. Not required",
          "type": "string",
          "x-go-name": "Description"
        },
        "downvotes": {
          "description": "Calculated by user input. Only decreases.",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Downvotes"
        },
        "information": {
          "$ref": "#/definitions/VolumeInformation"
        },
        "is_published": {
          "description": "True/False. Is it available on the site or not",
          "type": "boolean",
          "x-go-name": "IsPublished"
        },
        "length": {
          "description": "Cummulative scene lengths in seconds",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Length"
        },
        "price": {
          "description": "Read only value. Only Admin can update. Sets the price for a the volume which supersedes the scene price",
          "type": "number",
          "format": "float",
          "x-go-name": "Price"
        },
        "rank": {
          "description": "Calculated externally and maintained here",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Rank"
        },
        "reviewed": {
          "description": "True/False. Has someone reviewed this scene",
          "type": "boolean",
          "x-go-name": "Reviewed"
        },
        "series": {
          "$ref": "#/definitions/Series"
        },
        "slug": {
          "description": "Unique Slug for this scene. Made of \u003ctitle\u003e\u003cstudio\u003e lowercase and character stripped",
          "type": "string",
          "x-go-name": "Slug"
        },
        "tags": {
          "description": "Free list of tag strings",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        },
        "title": {
          "description": "Unique Title for this scene",
          "type": "string",
          "x-go-name": "Title"
        },
        "upvotes": {
          "description": "Calculated by user input. Only increases.",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Upvotes"
        },
        "views": {
          "description": "Calculated by user view. Only increases.",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Views"
        }
      },
      "x-go-package": "github.com/VuliTv/api/models"
    },
    "VolumeInformation": {
      "description": "VolumeInformation --",
      "type": "object",
      "properties": {
        "director": {
          "$ref": "#/definitions/Performer"
        },
        "performers": {
          "description": "List of Mongo ObjectID for the Performers in this scene. Embeddable",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Performers"
        },
        "studio": {
          "$ref": "#/definitions/Studio"
        }
      },
      "x-go-package": "github.com/VuliTv/api/models"
    }
  },
  "responses": {
    "categoryResp": {
      "description": "JSONPaginationResponseCategory --\nHTTP status code 200 and repository model in data",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Category"
        }
      },
      "headers": {
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "recordsonpage": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalpages": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "customerResp": {
      "description": "JSONPaginationResponseCustomer --\nHTTP status code 200 and repository model in data",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Customer"
        }
      },
      "headers": {
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "recordsonpage": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalpages": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "genericJsonError": {
      "description": "JSONErrorResponse --\nNotFound",
      "headers": {
        "error": {
          "type": "string"
        }
      }
    },
    "movieResp": {
      "description": "JSONPaginationResponseMovie --\nHTTP status code 200 and repository model in data",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Movie"
        }
      },
      "headers": {
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "recordsonpage": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalpages": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ok": {
      "description": "JSONSuccessResponse --\nSuccess response",
      "headers": {
        "identifier": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "performerResp": {
      "description": "JSONPaginationResponsePerformer --\nHTTP status code 200 and repository model in data",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Performer"
        }
      },
      "headers": {
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "recordsonpage": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalpages": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "sceneResp": {
      "description": "JSONPaginationResponseScene --\nHTTP status code 200 and repository model in data",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Scene"
        }
      },
      "headers": {
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "recordsonpage": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalpages": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "seriesResp": {
      "description": "JSONPaginationResponseSeries --\nHTTP status code 200 and repository model in data",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Series"
        }
      },
      "headers": {
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "recordsonpage": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalpages": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "studioResp": {
      "description": "JSONPaginationResponseStudio --\nHTTP status code 200 and repository model in data",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Studio"
        }
      },
      "headers": {
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "recordsonpage": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalpages": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "volumeResp": {
      "description": "JSONPaginationResponseVolume --\nHTTP status code 200 and repository model in data",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Volume"
        }
      },
      "headers": {
        "page": {
          "type": "integer",
          "format": "int64"
        },
        "recordsonpage": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "totalpages": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
  }
}